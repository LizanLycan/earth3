{
  "address": "0x08726d32Af726FAf57eDBd1eCB0a4E8AF38EA0Ce",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_erc20TokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_amountsToTransfer",
          "type": "uint256[]"
        }
      ],
      "name": "BatchPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "receivers",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amountsToTransfer",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Multipayment.Payment[]",
          "name": "_payments",
          "type": "tuple[]"
        }
      ],
      "name": "performMultiPayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1917c709753f31df2e8048fd2bb1ac90ddb02482a057b14010bb9319a844e518",
  "receipt": {
    "to": null,
    "from": "0xEd53C1ee27c9567BD8dA2CB0177b877962b1d46B",
    "contractAddress": "0x08726d32Af726FAf57eDBd1eCB0a4E8AF38EA0Ce",
    "transactionIndex": 3,
    "gasUsed": "1197499",
    "logsBloom": "0x
    "blockHash": "0xae94a13b84d5843c2e47b2834ce0048cd48f49735ab41d807f9af9d52097dea7",
    "transactionHash": "0x1917c709753f31df2e8048fd2bb1ac90ddb02482a057b14010bb9319a844e518",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 28520526,
        "transactionHash": "0x1917c709753f31df2e8048fd2bb1ac90ddb02482a057b14010bb9319a844e518",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ed53c1ee27c9567bd8da2cb0177b877962b1d46b",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000241bd842f6a90d000000000000000000000000000000000000000000000000067c69be35f51ba10000000000000000000000000000000000000000000009cd86799a58d028326800000000000000000000000000000000000000000000000006584de5f2fe72940000000000000000000000000000000000000000000009cd869db631131edb75",
        "logIndex": 5,
        "blockHash": "0xae94a13b84d5843c2e47b2834ce0048cd48f49735ab41d807f9af9d52097dea7"
      }
    ],
    "blockNumber": 28520526,
    "cumulativeGasUsed": "1558156",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1776a1788da75e92f57584c6e0c6d381",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_erc20TokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_amountsToTransfer\",\"type\":\"uint256[]\"}],\"name\":\"BatchPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Multipayment.Payment[]\",\"name\":\"_payments\",\"type\":\"tuple[]\"}],\"name\":\"performMultiPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performMultiPayment((address,address[],uint256[])[])\":{\"params\":{\"_payments\":\"The array of the Payment data.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performMultiPayment((address,address[],uint256[])[])\":{\"notice\":\"Perform the payments to the given addresses and amounts, public method.Only for ERC20.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multipayment.sol\":\"Multipayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbf46574f5b3e5ae4d823b06fef6fe20ed32a4c4cd5bb9cd07d1712da624321fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Multipayment.sol\":{\"content\":\"//SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\ncontract Multipayment is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    struct Payment {\\n        address token;\\n        address[] receivers;\\n        uint256[] amountsToTransfer;\\n    }\\n    \\n    event BatchPayment(address _erc20TokenAddress, address[] _receivers, uint256[] _amountsToTransfer);\\n\\n    function initialize(\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * Perform the payments to the given addresses and amounts, public method.\\n     * @param _payments The array of the Payment data.\\n     * @notice Only for ERC20.\\n     */\\n    function performMultiPayment(Payment[] calldata _payments) external payable nonReentrant {\\n        for (uint256 i = 0; i < _payments.length; i++) {\\n            require(\\n                _payments[i].amountsToTransfer.length == _payments[i].receivers.length,\\n                \\\"Arrays must have same length\\\"\\n            );\\n\\n            _performERC20Payment(_payments[i].token, _payments[i].receivers, _payments[i].amountsToTransfer);\\n        }\\n    }\\n\\n    function _performERC20Payment(\\n        address _erc20TokenAddress,\\n        address[] calldata _receivers,\\n        uint256[] calldata _amountsToTransfer\\n    ) internal {\\n        for (uint256 i = 0; i < _receivers.length; i++) {\\n            require(_receivers[i] != address(0), \\\"Cannot send to a 0 address\\\");\\n            TransferHelper.safeTransferFrom(_erc20TokenAddress, msg.sender, _receivers[i], _amountsToTransfer[i]);\\n        }\\n        emit BatchPayment(_erc20TokenAddress, _receivers, _amountsToTransfer);\\n    }\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x4f780fab946f601bf58636a602916074add5d2aa8a13c5fe189ad665fddbe9ea\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506114cf806100206000396000f3fe60806040526004361061004e5760003560e01c8063715018a61461005a5780638129fc1c146100715780638da5cb5b14610088578063db9d0334146100b3578063f2fde38b146100cf57610055565b3661005557005b600080fd5b34801561006657600080fd5b5061006f6100f8565b005b34801561007d57600080fd5b5061008661010c565b005b34801561009457600080fd5b5061009d610252565b6040516100aa9190610aa2565b60405180910390f35b6100cd60048036038101906100c89190610b2c565b61027c565b005b3480156100db57600080fd5b506100f660048036038101906100f19190610ba5565b610405565b005b610100610489565b61010a6000610507565b565b60008060019054906101000a900460ff1615905080801561013d5750600160008054906101000a900460ff1660ff16105b8061016a575061014c306105cd565b1580156101695750600160008054906101000a900460ff1660ff16145b5b6101a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a090610c55565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156101e6576001600060016101000a81548160ff0219169083151502179055505b6101ee6105f0565b6101f6610649565b801561024f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516102469190610cc7565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102846106a2565b60005b828290508110156103f8578282828181106102a5576102a4610ce2565b5b90506020028101906102b79190610d20565b80602001906102c69190610d48565b90508383838181106102db576102da610ce2565b5b90506020028101906102ed9190610d20565b80604001906102fc9190610dab565b90501461033e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033590610e5a565b60405180910390fd5b6103e583838381811061035457610353610ce2565b5b90506020028101906103669190610d20565b60000160208101906103789190610ba5565b84848481811061038b5761038a610ce2565b5b905060200281019061039d9190610d20565b80602001906103ac9190610d48565b8686868181106103bf576103be610ce2565b5b90506020028101906103d19190610d20565b80604001906103e09190610dab565b6106f2565b80806103f090610eb3565b915050610287565b5061040161083d565b5050565b61040d610489565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047490610f6e565b60405180910390fd5b61048681610507565b50565b610491610847565b73ffffffffffffffffffffffffffffffffffffffff166104af610252565b73ffffffffffffffffffffffffffffffffffffffff1614610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90610fda565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661063f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106369061106c565b60405180910390fd5b61064761084f565b565b600060019054906101000a900460ff16610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f9061106c565b60405180910390fd5b6106a06108a8565b565b600260655414156106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df906110d8565b60405180910390fd5b6002606581905550565b60005b848490508110156107f657600073ffffffffffffffffffffffffffffffffffffffff1685858381811061072b5761072a610ce2565b5b90506020020160208101906107409190610ba5565b73ffffffffffffffffffffffffffffffffffffffff161415610797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078e90611144565b60405180910390fd5b6107e386338787858181106107af576107ae610ce2565b5b90506020020160208101906107c49190610ba5565b8686868181106107d7576107d6610ce2565b5b90506020020135610909565b80806107ee90610eb3565b9150506106f5565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d9858585858560405161082e9594939291906112a8565b60405180910390a15050505050565b6001606581905550565b600033905090565b600060019054906101000a900460ff1661089e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108959061106c565b60405180910390fd5b6001606581905550565b600060019054906101000a900460ff166108f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee9061106c565b60405180910390fd5b610907610902610847565b610507565b565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161094093929190611300565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109aa91906113b1565b6000604051808303816000865af19150503d80600081146109e7576040519150601f19603f3d011682016040523d82523d6000602084013e6109ec565b606091505b5091509150818015610a1a5750600081511480610a19575080806020019051810190610a189190611400565b5b5b610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5090611479565b60405180910390fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8c82610a61565b9050919050565b610a9c81610a81565b82525050565b6000602082019050610ab76000830184610a93565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610aec57610aeb610ac7565b5b8235905067ffffffffffffffff811115610b0957610b08610acc565b5b602083019150836020820283011115610b2557610b24610ad1565b5b9250929050565b60008060208385031215610b4357610b42610abd565b5b600083013567ffffffffffffffff811115610b6157610b60610ac2565b5b610b6d85828601610ad6565b92509250509250929050565b610b8281610a81565b8114610b8d57600080fd5b50565b600081359050610b9f81610b79565b92915050565b600060208284031215610bbb57610bba610abd565b5b6000610bc984828501610b90565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610c3f602e83610bd2565b9150610c4a82610be3565b604082019050919050565b60006020820190508181036000830152610c6e81610c32565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000610cb1610cac610ca784610c75565b610c8c565b610c7f565b9050919050565b610cc181610c96565b82525050565b6000602082019050610cdc6000830184610cb8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001606003833603038112610d3c57610d3b610d11565b5b80830191505092915050565b60008083356001602003843603038112610d6557610d64610d11565b5b80840192508235915067ffffffffffffffff821115610d8757610d86610d16565b5b602083019250602082023603831315610da357610da2610d1b565b5b509250929050565b60008083356001602003843603038112610dc857610dc7610d11565b5b80840192508235915067ffffffffffffffff821115610dea57610de9610d16565b5b602083019250602082023603831315610e0657610e05610d1b565b5b509250929050565b7f417272617973206d75737420686176652073616d65206c656e67746800000000600082015250565b6000610e44601c83610bd2565b9150610e4f82610e0e565b602082019050919050565b60006020820190508181036000830152610e7381610e37565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610ebe82610ea9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ef157610ef0610e7a565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610f58602683610bd2565b9150610f6382610efc565b604082019050919050565b60006020820190508181036000830152610f8781610f4b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610fc4602083610bd2565b9150610fcf82610f8e565b602082019050919050565b60006020820190508181036000830152610ff381610fb7565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611056602b83610bd2565b915061106182610ffa565b604082019050919050565b6000602082019050818103600083015261108581611049565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006110c2601f83610bd2565b91506110cd8261108c565b602082019050919050565b600060208201905081810360008301526110f1816110b5565b9050919050565b7f43616e6e6f742073656e6420746f206120302061646472657373000000000000600082015250565b600061112e601a83610bd2565b9150611139826110f8565b602082019050919050565b6000602082019050818103600083015261115d81611121565b9050919050565b600082825260208201905092915050565b6000819050919050565b61118881610a81565b82525050565b600061119a838361117f565b60208301905092915050565b60006111b56020840184610b90565b905092915050565b6000602082019050919050565b60006111d68385611164565b93506111e182611175565b8060005b8581101561121a576111f782846111a6565b611201888261118e565b975061120c836111bd565b9250506001810190506111e5565b5085925050509392505050565b600082825260208201905092915050565b600080fd5b82818337600083830152505050565b60006112588385611227565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561128b5761128a611238565b5b60208302925061129c83858461123d565b82840190509392505050565b60006060820190506112bd6000830188610a93565b81810360208301526112d08186886111ca565b905081810360408301526112e581848661124c565b90509695505050505050565b6112fa81610ea9565b82525050565b60006060820190506113156000830186610a93565b6113226020830185610a93565b61132f60408301846112f1565b949350505050565b600081519050919050565b600081905092915050565b60005b8381101561136b578082015181840152602081019050611350565b8381111561137a576000848401525b50505050565b600061138b82611337565b6113958185611342565b93506113a581856020860161134d565b80840191505092915050565b60006113bd8284611380565b915081905092915050565b60008115159050919050565b6113dd816113c8565b81146113e857600080fd5b50565b6000815190506113fa816113d4565b92915050565b60006020828403121561141657611415610abd565b5b6000611424848285016113eb565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000611463600383610bd2565b915061146e8261142d565b602082019050919050565b6000602082019050818103600083015261149281611456565b905091905056fea264697066735822122046df28d86b8c891259fae043516a23513183338546e5d42ec3df3d7cf3534a1c64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c8063715018a61461005a5780638129fc1c146100715780638da5cb5b14610088578063db9d0334146100b3578063f2fde38b146100cf57610055565b3661005557005b600080fd5b34801561006657600080fd5b5061006f6100f8565b005b34801561007d57600080fd5b5061008661010c565b005b34801561009457600080fd5b5061009d610252565b6040516100aa9190610aa2565b60405180910390f35b6100cd60048036038101906100c89190610b2c565b61027c565b005b3480156100db57600080fd5b506100f660048036038101906100f19190610ba5565b610405565b005b610100610489565b61010a6000610507565b565b60008060019054906101000a900460ff1615905080801561013d5750600160008054906101000a900460ff1660ff16105b8061016a575061014c306105cd565b1580156101695750600160008054906101000a900460ff1660ff16145b5b6101a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a090610c55565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156101e6576001600060016101000a81548160ff0219169083151502179055505b6101ee6105f0565b6101f6610649565b801561024f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516102469190610cc7565b60405180910390a15b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102846106a2565b60005b828290508110156103f8578282828181106102a5576102a4610ce2565b5b90506020028101906102b79190610d20565b80602001906102c69190610d48565b90508383838181106102db576102da610ce2565b5b90506020028101906102ed9190610d20565b80604001906102fc9190610dab565b90501461033e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033590610e5a565b60405180910390fd5b6103e583838381811061035457610353610ce2565b5b90506020028101906103669190610d20565b60000160208101906103789190610ba5565b84848481811061038b5761038a610ce2565b5b905060200281019061039d9190610d20565b80602001906103ac9190610d48565b8686868181106103bf576103be610ce2565b5b90506020028101906103d19190610d20565b80604001906103e09190610dab565b6106f2565b80806103f090610eb3565b915050610287565b5061040161083d565b5050565b61040d610489565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561047d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047490610f6e565b60405180910390fd5b61048681610507565b50565b610491610847565b73ffffffffffffffffffffffffffffffffffffffff166104af610252565b73ffffffffffffffffffffffffffffffffffffffff1614610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90610fda565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661063f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106369061106c565b60405180910390fd5b61064761084f565b565b600060019054906101000a900460ff16610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f9061106c565b60405180910390fd5b6106a06108a8565b565b600260655414156106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df906110d8565b60405180910390fd5b6002606581905550565b60005b848490508110156107f657600073ffffffffffffffffffffffffffffffffffffffff1685858381811061072b5761072a610ce2565b5b90506020020160208101906107409190610ba5565b73ffffffffffffffffffffffffffffffffffffffff161415610797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078e90611144565b60405180910390fd5b6107e386338787858181106107af576107ae610ce2565b5b90506020020160208101906107c49190610ba5565b8686868181106107d7576107d6610ce2565b5b90506020020135610909565b80806107ee90610eb3565b9150506106f5565b507f61296616dea919da05ed0d5608a730a6f4f39d0703b9d8819da47e233c9a92d9858585858560405161082e9594939291906112a8565b60405180910390a15050505050565b6001606581905550565b600033905090565b600060019054906101000a900460ff1661089e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108959061106c565b60405180910390fd5b6001606581905550565b600060019054906101000a900460ff166108f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ee9061106c565b60405180910390fd5b610907610902610847565b610507565b565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161094093929190611300565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109aa91906113b1565b6000604051808303816000865af19150503d80600081146109e7576040519150601f19603f3d011682016040523d82523d6000602084013e6109ec565b606091505b5091509150818015610a1a5750600081511480610a19575080806020019051810190610a189190611400565b5b5b610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5090611479565b60405180910390fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8c82610a61565b9050919050565b610a9c81610a81565b82525050565b6000602082019050610ab76000830184610a93565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610aec57610aeb610ac7565b5b8235905067ffffffffffffffff811115610b0957610b08610acc565b5b602083019150836020820283011115610b2557610b24610ad1565b5b9250929050565b60008060208385031215610b4357610b42610abd565b5b600083013567ffffffffffffffff811115610b6157610b60610ac2565b5b610b6d85828601610ad6565b92509250509250929050565b610b8281610a81565b8114610b8d57600080fd5b50565b600081359050610b9f81610b79565b92915050565b600060208284031215610bbb57610bba610abd565b5b6000610bc984828501610b90565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610c3f602e83610bd2565b9150610c4a82610be3565b604082019050919050565b60006020820190508181036000830152610c6e81610c32565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000610cb1610cac610ca784610c75565b610c8c565b610c7f565b9050919050565b610cc181610c96565b82525050565b6000602082019050610cdc6000830184610cb8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001606003833603038112610d3c57610d3b610d11565b5b80830191505092915050565b60008083356001602003843603038112610d6557610d64610d11565b5b80840192508235915067ffffffffffffffff821115610d8757610d86610d16565b5b602083019250602082023603831315610da357610da2610d1b565b5b509250929050565b60008083356001602003843603038112610dc857610dc7610d11565b5b80840192508235915067ffffffffffffffff821115610dea57610de9610d16565b5b602083019250602082023603831315610e0657610e05610d1b565b5b509250929050565b7f417272617973206d75737420686176652073616d65206c656e67746800000000600082015250565b6000610e44601c83610bd2565b9150610e4f82610e0e565b602082019050919050565b60006020820190508181036000830152610e7381610e37565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610ebe82610ea9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ef157610ef0610e7a565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610f58602683610bd2565b9150610f6382610efc565b604082019050919050565b60006020820190508181036000830152610f8781610f4b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610fc4602083610bd2565b9150610fcf82610f8e565b602082019050919050565b60006020820190508181036000830152610ff381610fb7565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611056602b83610bd2565b915061106182610ffa565b604082019050919050565b6000602082019050818103600083015261108581611049565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006110c2601f83610bd2565b91506110cd8261108c565b602082019050919050565b600060208201905081810360008301526110f1816110b5565b9050919050565b7f43616e6e6f742073656e6420746f206120302061646472657373000000000000600082015250565b600061112e601a83610bd2565b9150611139826110f8565b602082019050919050565b6000602082019050818103600083015261115d81611121565b9050919050565b600082825260208201905092915050565b6000819050919050565b61118881610a81565b82525050565b600061119a838361117f565b60208301905092915050565b60006111b56020840184610b90565b905092915050565b6000602082019050919050565b60006111d68385611164565b93506111e182611175565b8060005b8581101561121a576111f782846111a6565b611201888261118e565b975061120c836111bd565b9250506001810190506111e5565b5085925050509392505050565b600082825260208201905092915050565b600080fd5b82818337600083830152505050565b60006112588385611227565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561128b5761128a611238565b5b60208302925061129c83858461123d565b82840190509392505050565b60006060820190506112bd6000830188610a93565b81810360208301526112d08186886111ca565b905081810360408301526112e581848661124c565b90509695505050505050565b6112fa81610ea9565b82525050565b60006060820190506113156000830186610a93565b6113226020830185610a93565b61132f60408301846112f1565b949350505050565b600081519050919050565b600081905092915050565b60005b8381101561136b578082015181840152602081019050611350565b8381111561137a576000848401525b50505050565b600061138b82611337565b6113958185611342565b93506113a581856020860161134d565b80840191505092915050565b60006113bd8284611380565b915081905092915050565b60008115159050919050565b6113dd816113c8565b81146113e857600080fd5b50565b6000815190506113fa816113d4565b92915050565b60006020828403121561141657611415610abd565b5b6000611424848285016113eb565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6000611463600383610bd2565b915061146e8261142d565b602082019050919050565b6000602082019050818103600083015261149281611456565b905091905056fea264697066735822122046df28d86b8c891259fae043516a23513183338546e5d42ec3df3d7cf3534a1c64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performMultiPayment((address,address[],uint256[])[])": {
        "params": {
          "_payments": "The array of the Payment data."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performMultiPayment((address,address[],uint256[])[])": {
        "notice": "Perform the payments to the given addresses and amounts, public method.Only for ERC20."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Multipayment.sol:Multipayment",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Multipayment.sol:Multipayment",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 698,
        "contract": "contracts/Multipayment.sol:Multipayment",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Multipayment.sol:Multipayment",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Multipayment.sol:Multipayment",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 314,
        "contract": "contracts/Multipayment.sol:Multipayment",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 372,
        "contract": "contracts/Multipayment.sol:Multipayment",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}