/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ControllerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DELEGATION_ENABLED()": FunctionFragment;
    "STARTING_DELAY()": FunctionFragment;
    "createFYTDelegationTo(address,address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "exitTerminatedFuture(address,address)": FunctionFragment;
    "getCurrentPerformanceFeeFactor(address)": FunctionFragment;
    "getDurations()": FunctionFragment;
    "getFuturesWithDuration(uint256)": FunctionFragment;
    "getNextPerformanceFeeFactor(address)": FunctionFragment;
    "getNextPeriodStart(uint256)": FunctionFragment;
    "getPeriodIndex(uint256)": FunctionFragment;
    "getRegistryAddress()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "harvestVaultRewards(address)": FunctionFragment;
    "harvestWalletRewards(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isDepositsPaused(address)": FunctionFragment;
    "isFutureSetToBeTerminated(address)": FunctionFragment;
    "isFutureTerminated(address)": FunctionFragment;
    "isWithdrawalsPaused(address)": FunctionFragment;
    "redeemAllVaultRewards(address)": FunctionFragment;
    "redeemAllWalletRewards(address)": FunctionFragment;
    "redeemVaultRewards(address,address)": FunctionFragment;
    "redeemWalletRewards(address,address)": FunctionFragment;
    "registerNewFutureVault(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFutureToTerminate(address)": FunctionFragment;
    "setNextPerformanceFeeFactor(address,uint256)": FunctionFragment;
    "setNextPeriodSwitchTimestamp(uint256,uint256)": FunctionFragment;
    "setPeriodDurationIndex(uint256,uint256)": FunctionFragment;
    "setPeriodStartingDelay(uint256)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "startFuture(address)": FunctionFragment;
    "startFuturesByPeriodDuration(uint256)": FunctionFragment;
    "toggleDelegationPause()": FunctionFragment;
    "toggleDepositPause(address)": FunctionFragment;
    "toggleWithdrawalPause(address)": FunctionFragment;
    "unregisterFutureVault(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawFYTDelegationFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "DELEGATION_ENABLED"
      | "STARTING_DELAY"
      | "createFYTDelegationTo"
      | "deposit"
      | "exitTerminatedFuture"
      | "getCurrentPerformanceFeeFactor"
      | "getDurations"
      | "getFuturesWithDuration"
      | "getNextPerformanceFeeFactor"
      | "getNextPeriodStart"
      | "getPeriodIndex"
      | "getRegistryAddress"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "harvestVaultRewards"
      | "harvestWalletRewards"
      | "hasRole"
      | "initialize"
      | "isDepositsPaused"
      | "isFutureSetToBeTerminated"
      | "isFutureTerminated"
      | "isWithdrawalsPaused"
      | "redeemAllVaultRewards"
      | "redeemAllWalletRewards"
      | "redeemVaultRewards"
      | "redeemWalletRewards"
      | "registerNewFutureVault"
      | "renounceRole"
      | "revokeRole"
      | "setFutureToTerminate"
      | "setNextPerformanceFeeFactor"
      | "setNextPeriodSwitchTimestamp"
      | "setPeriodDurationIndex"
      | "setPeriodStartingDelay"
      | "setRegistry"
      | "startFuture"
      | "startFuturesByPeriodDuration"
      | "toggleDelegationPause"
      | "toggleDepositPause"
      | "toggleWithdrawalPause"
      | "unregisterFutureVault"
      | "withdraw"
      | "withdrawFYTDelegationFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATION_ENABLED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STARTING_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFYTDelegationTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitTerminatedFuture",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPerformanceFeeFactor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFuturesWithDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPerformanceFeeFactor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPeriodStart",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestVaultRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestWalletRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositsPaused",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFutureSetToBeTerminated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFutureTerminated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawalsPaused",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllVaultRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllWalletRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVaultRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWalletRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNewFutureVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFutureToTerminate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextPerformanceFeeFactor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNextPeriodSwitchTimestamp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriodDurationIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriodStartingDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startFuture",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startFuturesByPeriodDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDelegationPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDepositPause",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWithdrawalPause",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterFutureVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFYTDelegationFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATION_ENABLED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STARTING_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFYTDelegationTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitTerminatedFuture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPerformanceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFuturesWithDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPerformanceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPeriodStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestVaultRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestWalletRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDepositsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFutureSetToBeTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFutureTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawalsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllVaultRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllWalletRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVaultRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemWalletRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNewFutureVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFutureToTerminate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextPerformanceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNextPeriodSwitchTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPeriodDurationIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPeriodStartingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startFuture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startFuturesByPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDelegationPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDepositPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleWithdrawalPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterFutureVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFYTDelegationFrom",
    data: BytesLike
  ): Result;

  events: {
    "DelegationPauseChanged(bool)": EventFragment;
    "DepositPauseChanged(address,bool)": EventFragment;
    "FutureRegistered(address)": EventFragment;
    "FutureSetToBeTerminated(address)": EventFragment;
    "FutureTerminated(address)": EventFragment;
    "FutureUnregistered(address)": EventFragment;
    "NewPerformanceFeeFactor(address,uint256)": EventFragment;
    "NewPeriodDurationIndexSet(uint256)": EventFragment;
    "NextPeriodSwitchSet(uint256,uint256)": EventFragment;
    "PeriodSwitchedByDurationDisabled(uint256,uint256)": EventFragment;
    "RegistryChanged(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StartingDelaySet(uint256)": EventFragment;
    "WithdrawalPauseChanged(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegationPauseChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositPauseChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureSetToBeTerminated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureTerminated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPerformanceFeeFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPeriodDurationIndexSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NextPeriodSwitchSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PeriodSwitchedByDurationDisabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartingDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalPauseChanged"): EventFragment;
}

export interface DelegationPauseChangedEventObject {
  _delegationPaused: boolean;
}
export type DelegationPauseChangedEvent = TypedEvent<
  [boolean],
  DelegationPauseChangedEventObject
>;

export type DelegationPauseChangedEventFilter =
  TypedEventFilter<DelegationPauseChangedEvent>;

export interface DepositPauseChangedEventObject {
  _futureVault: string;
  _depositPaused: boolean;
}
export type DepositPauseChangedEvent = TypedEvent<
  [string, boolean],
  DepositPauseChangedEventObject
>;

export type DepositPauseChangedEventFilter =
  TypedEventFilter<DepositPauseChangedEvent>;

export interface FutureRegisteredEventObject {
  _futureVault: string;
}
export type FutureRegisteredEvent = TypedEvent<
  [string],
  FutureRegisteredEventObject
>;

export type FutureRegisteredEventFilter =
  TypedEventFilter<FutureRegisteredEvent>;

export interface FutureSetToBeTerminatedEventObject {
  _futureVault: string;
}
export type FutureSetToBeTerminatedEvent = TypedEvent<
  [string],
  FutureSetToBeTerminatedEventObject
>;

export type FutureSetToBeTerminatedEventFilter =
  TypedEventFilter<FutureSetToBeTerminatedEvent>;

export interface FutureTerminatedEventObject {
  _futureVault: string;
}
export type FutureTerminatedEvent = TypedEvent<
  [string],
  FutureTerminatedEventObject
>;

export type FutureTerminatedEventFilter =
  TypedEventFilter<FutureTerminatedEvent>;

export interface FutureUnregisteredEventObject {
  _futureVault: string;
}
export type FutureUnregisteredEvent = TypedEvent<
  [string],
  FutureUnregisteredEventObject
>;

export type FutureUnregisteredEventFilter =
  TypedEventFilter<FutureUnregisteredEvent>;

export interface NewPerformanceFeeFactorEventObject {
  _futureVault: string;
  _feeFactor: BigNumber;
}
export type NewPerformanceFeeFactorEvent = TypedEvent<
  [string, BigNumber],
  NewPerformanceFeeFactorEventObject
>;

export type NewPerformanceFeeFactorEventFilter =
  TypedEventFilter<NewPerformanceFeeFactorEvent>;

export interface NewPeriodDurationIndexSetEventObject {
  _periodIndex: BigNumber;
}
export type NewPeriodDurationIndexSetEvent = TypedEvent<
  [BigNumber],
  NewPeriodDurationIndexSetEventObject
>;

export type NewPeriodDurationIndexSetEventFilter =
  TypedEventFilter<NewPeriodDurationIndexSetEvent>;

export interface NextPeriodSwitchSetEventObject {
  _periodDuration: BigNumber;
  _nextSwitchTimestamp: BigNumber;
}
export type NextPeriodSwitchSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  NextPeriodSwitchSetEventObject
>;

export type NextPeriodSwitchSetEventFilter =
  TypedEventFilter<NextPeriodSwitchSetEvent>;

export interface PeriodSwitchedByDurationDisabledEventObject {
  _periodDuration: BigNumber;
  _periodIndex: BigNumber;
}
export type PeriodSwitchedByDurationDisabledEvent = TypedEvent<
  [BigNumber, BigNumber],
  PeriodSwitchedByDurationDisabledEventObject
>;

export type PeriodSwitchedByDurationDisabledEventFilter =
  TypedEventFilter<PeriodSwitchedByDurationDisabledEvent>;

export interface RegistryChangedEventObject {
  _registry: string;
}
export type RegistryChangedEvent = TypedEvent<
  [string],
  RegistryChangedEventObject
>;

export type RegistryChangedEventFilter = TypedEventFilter<RegistryChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StartingDelaySetEventObject {
  _startingDelay: BigNumber;
}
export type StartingDelaySetEvent = TypedEvent<
  [BigNumber],
  StartingDelaySetEventObject
>;

export type StartingDelaySetEventFilter =
  TypedEventFilter<StartingDelaySetEvent>;

export interface WithdrawalPauseChangedEventObject {
  _futureVault: string;
  _withdrawalPaused: boolean;
}
export type WithdrawalPauseChangedEvent = TypedEvent<
  [string, boolean],
  WithdrawalPauseChangedEventObject
>;

export type WithdrawalPauseChangedEventFilter =
  TypedEventFilter<WithdrawalPauseChangedEvent>;

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DELEGATION_ENABLED(overrides?: CallOverrides): Promise<[boolean]>;

    STARTING_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    createFYTDelegationTo(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitTerminatedFuture(
      _futureVault: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDurations(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { durationsList: BigNumber[] }>;

    getFuturesWithDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { filteredFutures: string[] }>;

    getNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextPeriodStart(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRegistryAddress(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestVaultRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestWalletRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _registry: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isDepositsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFutureSetToBeTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFutureTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWithdrawalsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    redeemAllVaultRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemAllWalletRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemVaultRewards(
      _futureVault: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemWalletRewards(
      _futureVault: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNewFutureVault(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFutureToTerminate(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      _feeFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNextPeriodSwitchTimestamp(
      _periodDuration: PromiseOrValue<BigNumberish>,
      _nextPeriodTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPeriodDurationIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      _newPeriodIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPeriodStartingDelay(
      _startingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startFuture(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startFuturesByPeriodDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleDelegationPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleDepositPause(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toggleWithdrawalPause(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unregisterFutureVault(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFYTDelegationFrom(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DELEGATION_ENABLED(overrides?: CallOverrides): Promise<boolean>;

  STARTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  createFYTDelegationTo(
    _futureVault: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _futureVault: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitTerminatedFuture(
    _futureVault: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentPerformanceFeeFactor(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDurations(overrides?: CallOverrides): Promise<BigNumber[]>;

  getFuturesWithDuration(
    _periodDuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getNextPerformanceFeeFactor(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextPeriodStart(
    _periodDuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodIndex(
    _periodDuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegistryAddress(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestVaultRewards(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestWalletRewards(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _registry: PromiseOrValue<string>,
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isDepositsPaused(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFutureSetToBeTerminated(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFutureTerminated(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWithdrawalsPaused(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  redeemAllVaultRewards(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemAllWalletRewards(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemVaultRewards(
    _futureVault: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemWalletRewards(
    _futureVault: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNewFutureVault(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFutureToTerminate(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNextPerformanceFeeFactor(
    _futureVault: PromiseOrValue<string>,
    _feeFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNextPeriodSwitchTimestamp(
    _periodDuration: PromiseOrValue<BigNumberish>,
    _nextPeriodTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPeriodDurationIndex(
    _periodDuration: PromiseOrValue<BigNumberish>,
    _newPeriodIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPeriodStartingDelay(
    _startingDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startFuture(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startFuturesByPeriodDuration(
    _periodDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleDelegationPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleDepositPause(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toggleWithdrawalPause(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unregisterFutureVault(
    _futureVault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _futureVault: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFYTDelegationFrom(
    _futureVault: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DELEGATION_ENABLED(overrides?: CallOverrides): Promise<boolean>;

    STARTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    createFYTDelegationTo(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitTerminatedFuture(
      _futureVault: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDurations(overrides?: CallOverrides): Promise<BigNumber[]>;

    getFuturesWithDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextPeriodStart(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistryAddress(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    harvestVaultRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    harvestWalletRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _registry: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isDepositsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFutureSetToBeTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFutureTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWithdrawalsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeemAllVaultRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemAllWalletRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemVaultRewards(
      _futureVault: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemWalletRewards(
      _futureVault: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerNewFutureVault(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFutureToTerminate(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      _feeFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNextPeriodSwitchTimestamp(
      _periodDuration: PromiseOrValue<BigNumberish>,
      _nextPeriodTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriodDurationIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      _newPeriodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriodStartingDelay(
      _startingDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startFuture(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startFuturesByPeriodDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleDelegationPause(overrides?: CallOverrides): Promise<void>;

    toggleDepositPause(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    toggleWithdrawalPause(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterFutureVault(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFYTDelegationFrom(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DelegationPauseChanged(bool)"(
      _delegationPaused?: null
    ): DelegationPauseChangedEventFilter;
    DelegationPauseChanged(
      _delegationPaused?: null
    ): DelegationPauseChangedEventFilter;

    "DepositPauseChanged(address,bool)"(
      _futureVault?: null,
      _depositPaused?: null
    ): DepositPauseChangedEventFilter;
    DepositPauseChanged(
      _futureVault?: null,
      _depositPaused?: null
    ): DepositPauseChangedEventFilter;

    "FutureRegistered(address)"(
      _futureVault?: null
    ): FutureRegisteredEventFilter;
    FutureRegistered(_futureVault?: null): FutureRegisteredEventFilter;

    "FutureSetToBeTerminated(address)"(
      _futureVault?: null
    ): FutureSetToBeTerminatedEventFilter;
    FutureSetToBeTerminated(
      _futureVault?: null
    ): FutureSetToBeTerminatedEventFilter;

    "FutureTerminated(address)"(
      _futureVault?: null
    ): FutureTerminatedEventFilter;
    FutureTerminated(_futureVault?: null): FutureTerminatedEventFilter;

    "FutureUnregistered(address)"(
      _futureVault?: null
    ): FutureUnregisteredEventFilter;
    FutureUnregistered(_futureVault?: null): FutureUnregisteredEventFilter;

    "NewPerformanceFeeFactor(address,uint256)"(
      _futureVault?: null,
      _feeFactor?: null
    ): NewPerformanceFeeFactorEventFilter;
    NewPerformanceFeeFactor(
      _futureVault?: null,
      _feeFactor?: null
    ): NewPerformanceFeeFactorEventFilter;

    "NewPeriodDurationIndexSet(uint256)"(
      _periodIndex?: null
    ): NewPeriodDurationIndexSetEventFilter;
    NewPeriodDurationIndexSet(
      _periodIndex?: null
    ): NewPeriodDurationIndexSetEventFilter;

    "NextPeriodSwitchSet(uint256,uint256)"(
      _periodDuration?: null,
      _nextSwitchTimestamp?: null
    ): NextPeriodSwitchSetEventFilter;
    NextPeriodSwitchSet(
      _periodDuration?: null,
      _nextSwitchTimestamp?: null
    ): NextPeriodSwitchSetEventFilter;

    "PeriodSwitchedByDurationDisabled(uint256,uint256)"(
      _periodDuration?: null,
      _periodIndex?: null
    ): PeriodSwitchedByDurationDisabledEventFilter;
    PeriodSwitchedByDurationDisabled(
      _periodDuration?: null,
      _periodIndex?: null
    ): PeriodSwitchedByDurationDisabledEventFilter;

    "RegistryChanged(address)"(_registry?: null): RegistryChangedEventFilter;
    RegistryChanged(_registry?: null): RegistryChangedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "StartingDelaySet(uint256)"(
      _startingDelay?: null
    ): StartingDelaySetEventFilter;
    StartingDelaySet(_startingDelay?: null): StartingDelaySetEventFilter;

    "WithdrawalPauseChanged(address,bool)"(
      _futureVault?: null,
      _withdrawalPaused?: null
    ): WithdrawalPauseChangedEventFilter;
    WithdrawalPauseChanged(
      _futureVault?: null,
      _withdrawalPaused?: null
    ): WithdrawalPauseChangedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATION_ENABLED(overrides?: CallOverrides): Promise<BigNumber>;

    STARTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    createFYTDelegationTo(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitTerminatedFuture(
      _futureVault: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDurations(overrides?: CallOverrides): Promise<BigNumber>;

    getFuturesWithDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextPeriodStart(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestVaultRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestWalletRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _registry: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isDepositsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFutureSetToBeTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFutureTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWithdrawalsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemAllVaultRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemAllWalletRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemVaultRewards(
      _futureVault: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemWalletRewards(
      _futureVault: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNewFutureVault(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFutureToTerminate(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      _feeFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNextPeriodSwitchTimestamp(
      _periodDuration: PromiseOrValue<BigNumberish>,
      _nextPeriodTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPeriodDurationIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      _newPeriodIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPeriodStartingDelay(
      _startingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startFuture(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startFuturesByPeriodDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleDelegationPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleDepositPause(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toggleWithdrawalPause(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unregisterFutureVault(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFYTDelegationFrom(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DELEGATION_ENABLED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STARTING_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createFYTDelegationTo(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitTerminatedFuture(
      _futureVault: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDurations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFuturesWithDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextPeriodStart(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestVaultRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestWalletRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isDepositsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFutureSetToBeTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFutureTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWithdrawalsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemAllVaultRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemAllWalletRewards(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemVaultRewards(
      _futureVault: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemWalletRewards(
      _futureVault: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNewFutureVault(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFutureToTerminate(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      _feeFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNextPeriodSwitchTimestamp(
      _periodDuration: PromiseOrValue<BigNumberish>,
      _nextPeriodTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPeriodDurationIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      _newPeriodIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPeriodStartingDelay(
      _startingDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startFuture(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startFuturesByPeriodDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleDelegationPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleDepositPause(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toggleWithdrawalPause(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unregisterFutureVault(
      _futureVault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFYTDelegationFrom(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
