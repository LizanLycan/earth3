/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IRegistryInterface extends utils.Interface {
  functions: {
    "addFutureVault(address)": FunctionFragment;
    "futureVaultCount()": FunctionFragment;
    "getControllerAddress()": FunctionFragment;
    "getFYTLogicAddress()": FunctionFragment;
    "getFutureVaultAt(uint256)": FunctionFragment;
    "getPTLogicAddress()": FunctionFragment;
    "getTokensFactoryAddress()": FunctionFragment;
    "getTreasuryAddress()": FunctionFragment;
    "isRegisteredFutureVault(address)": FunctionFragment;
    "removeFutureVault(address)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setFYTLogic(address)": FunctionFragment;
    "setPTLogic(address)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addFutureVault"
      | "futureVaultCount"
      | "getControllerAddress"
      | "getFYTLogicAddress"
      | "getFutureVaultAt"
      | "getPTLogicAddress"
      | "getTokensFactoryAddress"
      | "getTreasuryAddress"
      | "isRegisteredFutureVault"
      | "removeFutureVault"
      | "setController"
      | "setFYTLogic"
      | "setPTLogic"
      | "setTreasury"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addFutureVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "futureVaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFYTLogicAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFutureVaultAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPTLogicAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredFutureVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFutureVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFYTLogic",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPTLogic",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFutureVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "futureVaultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFYTLogicAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFutureVaultAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPTLogicAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredFutureVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFutureVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFYTLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPTLogic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    futureVaultCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getControllerAddress(overrides?: CallOverrides): Promise<[string]>;

    getFYTLogicAddress(overrides?: CallOverrides): Promise<[string]>;

    getFutureVaultAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPTLogicAddress(overrides?: CallOverrides): Promise<[string]>;

    getTokensFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<[string]>;

    isRegisteredFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFYTLogic(
      _FYTLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPTLogic(
      _PTLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addFutureVault(
    _future: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  futureVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

  getControllerAddress(overrides?: CallOverrides): Promise<string>;

  getFYTLogicAddress(overrides?: CallOverrides): Promise<string>;

  getFutureVaultAt(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPTLogicAddress(overrides?: CallOverrides): Promise<string>;

  getTokensFactoryAddress(overrides?: CallOverrides): Promise<string>;

  getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

  isRegisteredFutureVault(
    _future: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeFutureVault(
    _future: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    _newController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFYTLogic(
    _FYTLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPTLogic(
    _PTLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _newTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    futureVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    getControllerAddress(overrides?: CallOverrides): Promise<string>;

    getFYTLogicAddress(overrides?: CallOverrides): Promise<string>;

    getFutureVaultAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPTLogicAddress(overrides?: CallOverrides): Promise<string>;

    getTokensFactoryAddress(overrides?: CallOverrides): Promise<string>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<string>;

    isRegisteredFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _newController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFYTLogic(
      _FYTLogic: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPTLogic(
      _PTLogic: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    futureVaultCount(overrides?: CallOverrides): Promise<BigNumber>;

    getControllerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTLogicAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getFutureVaultAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPTLogicAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isRegisteredFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFYTLogic(
      _FYTLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPTLogic(
      _PTLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    futureVaultCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getControllerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFYTLogicAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFutureVaultAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPTLogicAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFutureVault(
      _future: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _newController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFYTLogic(
      _FYTLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPTLogic(
      _PTLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
