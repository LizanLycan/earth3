/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IFutureWalletInterface extends utils.Interface {
  functions: {
    "getFutureVaultAddress()": FunctionFragment;
    "getIBTAddress()": FunctionFragment;
    "getRedeemableYield(uint256,address)": FunctionFragment;
    "getRewardsRecipient()": FunctionFragment;
    "harvestRewards()": FunctionFragment;
    "redeemAllWalletRewards()": FunctionFragment;
    "redeemWalletRewards(address)": FunctionFragment;
    "redeemYield(uint256)": FunctionFragment;
    "registerExpiredFuture(uint256)": FunctionFragment;
    "setRewardRecipient(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFutureVaultAddress"
      | "getIBTAddress"
      | "getRedeemableYield"
      | "getRewardsRecipient"
      | "harvestRewards"
      | "redeemAllWalletRewards"
      | "redeemWalletRewards"
      | "redeemYield"
      | "registerExpiredFuture"
      | "setRewardRecipient"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFutureVaultAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIBTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRedeemableYield",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllWalletRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWalletRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemYield",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerExpiredFuture",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRecipient",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFutureVaultAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIBTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemableYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllWalletRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemWalletRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerExpiredFuture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRecipient",
    data: BytesLike
  ): Result;

  events: {
    "WithdrawalsPaused()": EventFragment;
    "WithdrawalsResumed()": EventFragment;
    "YieldRedeemed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WithdrawalsPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalsResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldRedeemed"): EventFragment;
}

export interface WithdrawalsPausedEventObject {}
export type WithdrawalsPausedEvent = TypedEvent<
  [],
  WithdrawalsPausedEventObject
>;

export type WithdrawalsPausedEventFilter =
  TypedEventFilter<WithdrawalsPausedEvent>;

export interface WithdrawalsResumedEventObject {}
export type WithdrawalsResumedEvent = TypedEvent<
  [],
  WithdrawalsResumedEventObject
>;

export type WithdrawalsResumedEventFilter =
  TypedEventFilter<WithdrawalsResumedEvent>;

export interface YieldRedeemedEventObject {
  _user: string;
  _periodIndex: BigNumber;
}
export type YieldRedeemedEvent = TypedEvent<
  [string, BigNumber],
  YieldRedeemedEventObject
>;

export type YieldRedeemedEventFilter = TypedEventFilter<YieldRedeemedEvent>;

export interface IFutureWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFutureWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFutureVaultAddress(overrides?: CallOverrides): Promise<[string]>;

    getIBTAddress(overrides?: CallOverrides): Promise<[string]>;

    getRedeemableYield(
      _periodIndex: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardsRecipient(overrides?: CallOverrides): Promise<[string]>;

    harvestRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemAllWalletRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemWalletRewards(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemYield(
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerExpiredFuture(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getFutureVaultAddress(overrides?: CallOverrides): Promise<string>;

  getIBTAddress(overrides?: CallOverrides): Promise<string>;

  getRedeemableYield(
    _periodIndex: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsRecipient(overrides?: CallOverrides): Promise<string>;

  harvestRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemAllWalletRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemWalletRewards(
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemYield(
    _periodIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerExpiredFuture(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardRecipient(
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getFutureVaultAddress(overrides?: CallOverrides): Promise<string>;

    getIBTAddress(overrides?: CallOverrides): Promise<string>;

    getRedeemableYield(
      _periodIndex: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsRecipient(overrides?: CallOverrides): Promise<string>;

    harvestRewards(overrides?: CallOverrides): Promise<void>;

    redeemAllWalletRewards(overrides?: CallOverrides): Promise<void>;

    redeemWalletRewards(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemYield(
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerExpiredFuture(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "WithdrawalsPaused()"(): WithdrawalsPausedEventFilter;
    WithdrawalsPaused(): WithdrawalsPausedEventFilter;

    "WithdrawalsResumed()"(): WithdrawalsResumedEventFilter;
    WithdrawalsResumed(): WithdrawalsResumedEventFilter;

    "YieldRedeemed(address,uint256)"(
      _user?: null,
      _periodIndex?: null
    ): YieldRedeemedEventFilter;
    YieldRedeemed(_user?: null, _periodIndex?: null): YieldRedeemedEventFilter;
  };

  estimateGas: {
    getFutureVaultAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getIBTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemableYield(
      _periodIndex: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    harvestRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemAllWalletRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemWalletRewards(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemYield(
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerExpiredFuture(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFutureVaultAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIBTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedeemableYield(
      _periodIndex: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemAllWalletRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemWalletRewards(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemYield(
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerExpiredFuture(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
