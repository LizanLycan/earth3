/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IControllerInterface extends utils.Interface {
  functions: {
    "STARTING_DELAY()": FunctionFragment;
    "createFYTDelegationTo(address,address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "exitTerminatedFuture(address,address)": FunctionFragment;
    "getCurrentPerformanceFeeFactor(address)": FunctionFragment;
    "getDurations()": FunctionFragment;
    "getFuturesWithDuration(uint256)": FunctionFragment;
    "getNextPerformanceFeeFactor(address)": FunctionFragment;
    "getNextPeriodStart(uint256)": FunctionFragment;
    "getPeriodIndex(uint256)": FunctionFragment;
    "getRegistryAddress()": FunctionFragment;
    "isDepositsPaused(address)": FunctionFragment;
    "isFutureSetToBeTerminated(address)": FunctionFragment;
    "isFutureTerminated(address)": FunctionFragment;
    "isWithdrawalsPaused(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawFYTDelegationFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "STARTING_DELAY"
      | "createFYTDelegationTo"
      | "deposit"
      | "exitTerminatedFuture"
      | "getCurrentPerformanceFeeFactor"
      | "getDurations"
      | "getFuturesWithDuration"
      | "getNextPerformanceFeeFactor"
      | "getNextPeriodStart"
      | "getPeriodIndex"
      | "getRegistryAddress"
      | "isDepositsPaused"
      | "isFutureSetToBeTerminated"
      | "isFutureTerminated"
      | "isWithdrawalsPaused"
      | "withdraw"
      | "withdrawFYTDelegationFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "STARTING_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFYTDelegationTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitTerminatedFuture",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPerformanceFeeFactor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFuturesWithDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPerformanceFeeFactor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPeriodStart",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositsPaused",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFutureSetToBeTerminated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFutureTerminated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawalsPaused",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFYTDelegationFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "STARTING_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFYTDelegationTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitTerminatedFuture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPerformanceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFuturesWithDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPerformanceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPeriodStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDepositsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFutureSetToBeTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFutureTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawalsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFYTDelegationFrom",
    data: BytesLike
  ): Result;

  events: {
    "DepositsPaused(address)": EventFragment;
    "DepositsResumed(address)": EventFragment;
    "FutureRegistered(address)": EventFragment;
    "FutureSetToBeTerminated(address)": EventFragment;
    "FutureTerminated(address)": EventFragment;
    "FutureUnregistered(address)": EventFragment;
    "NewPerformanceFeeFactor(address,uint256)": EventFragment;
    "NewPeriodDurationIndexSet(uint256)": EventFragment;
    "NextPeriodSwitchSet(uint256,uint256)": EventFragment;
    "RegistryChanged(address)": EventFragment;
    "StartingDelaySet(uint256)": EventFragment;
    "WithdrawalsPaused(address)": EventFragment;
    "WithdrawalsResumed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositsPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositsResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureSetToBeTerminated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureTerminated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPerformanceFeeFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPeriodDurationIndexSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NextPeriodSwitchSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartingDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalsPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalsResumed"): EventFragment;
}

export interface DepositsPausedEventObject {
  _futureVault: string;
}
export type DepositsPausedEvent = TypedEvent<
  [string],
  DepositsPausedEventObject
>;

export type DepositsPausedEventFilter = TypedEventFilter<DepositsPausedEvent>;

export interface DepositsResumedEventObject {
  _futureVault: string;
}
export type DepositsResumedEvent = TypedEvent<
  [string],
  DepositsResumedEventObject
>;

export type DepositsResumedEventFilter = TypedEventFilter<DepositsResumedEvent>;

export interface FutureRegisteredEventObject {
  _futureVault: string;
}
export type FutureRegisteredEvent = TypedEvent<
  [string],
  FutureRegisteredEventObject
>;

export type FutureRegisteredEventFilter =
  TypedEventFilter<FutureRegisteredEvent>;

export interface FutureSetToBeTerminatedEventObject {
  _futureVault: string;
}
export type FutureSetToBeTerminatedEvent = TypedEvent<
  [string],
  FutureSetToBeTerminatedEventObject
>;

export type FutureSetToBeTerminatedEventFilter =
  TypedEventFilter<FutureSetToBeTerminatedEvent>;

export interface FutureTerminatedEventObject {
  _futureVault: string;
}
export type FutureTerminatedEvent = TypedEvent<
  [string],
  FutureTerminatedEventObject
>;

export type FutureTerminatedEventFilter =
  TypedEventFilter<FutureTerminatedEvent>;

export interface FutureUnregisteredEventObject {
  _futureVault: string;
}
export type FutureUnregisteredEvent = TypedEvent<
  [string],
  FutureUnregisteredEventObject
>;

export type FutureUnregisteredEventFilter =
  TypedEventFilter<FutureUnregisteredEvent>;

export interface NewPerformanceFeeFactorEventObject {
  _futureVault: string;
  _feeFactor: BigNumber;
}
export type NewPerformanceFeeFactorEvent = TypedEvent<
  [string, BigNumber],
  NewPerformanceFeeFactorEventObject
>;

export type NewPerformanceFeeFactorEventFilter =
  TypedEventFilter<NewPerformanceFeeFactorEvent>;

export interface NewPeriodDurationIndexSetEventObject {
  _periodIndex: BigNumber;
}
export type NewPeriodDurationIndexSetEvent = TypedEvent<
  [BigNumber],
  NewPeriodDurationIndexSetEventObject
>;

export type NewPeriodDurationIndexSetEventFilter =
  TypedEventFilter<NewPeriodDurationIndexSetEvent>;

export interface NextPeriodSwitchSetEventObject {
  _periodDuration: BigNumber;
  _nextSwitchTimestamp: BigNumber;
}
export type NextPeriodSwitchSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  NextPeriodSwitchSetEventObject
>;

export type NextPeriodSwitchSetEventFilter =
  TypedEventFilter<NextPeriodSwitchSetEvent>;

export interface RegistryChangedEventObject {
  _registry: string;
}
export type RegistryChangedEvent = TypedEvent<
  [string],
  RegistryChangedEventObject
>;

export type RegistryChangedEventFilter = TypedEventFilter<RegistryChangedEvent>;

export interface StartingDelaySetEventObject {
  _startingDelay: BigNumber;
}
export type StartingDelaySetEvent = TypedEvent<
  [BigNumber],
  StartingDelaySetEventObject
>;

export type StartingDelaySetEventFilter =
  TypedEventFilter<StartingDelaySetEvent>;

export interface WithdrawalsPausedEventObject {
  _futureVault: string;
}
export type WithdrawalsPausedEvent = TypedEvent<
  [string],
  WithdrawalsPausedEventObject
>;

export type WithdrawalsPausedEventFilter =
  TypedEventFilter<WithdrawalsPausedEvent>;

export interface WithdrawalsResumedEventObject {
  _futureVault: string;
}
export type WithdrawalsResumedEvent = TypedEvent<
  [string],
  WithdrawalsResumedEventObject
>;

export type WithdrawalsResumedEventFilter =
  TypedEventFilter<WithdrawalsResumedEvent>;

export interface IController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    STARTING_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    createFYTDelegationTo(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitTerminatedFuture(
      _futureVault: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDurations(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { durationsList: BigNumber[] }>;

    getFuturesWithDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { filteredFutures: string[] }>;

    getNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNextPeriodStart(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRegistryAddress(overrides?: CallOverrides): Promise<[string]>;

    isDepositsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFutureSetToBeTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFutureTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWithdrawalsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFYTDelegationFrom(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  STARTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  createFYTDelegationTo(
    _futureVault: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _futureVault: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitTerminatedFuture(
    _futureVault: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentPerformanceFeeFactor(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDurations(overrides?: CallOverrides): Promise<BigNumber[]>;

  getFuturesWithDuration(
    _periodDuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getNextPerformanceFeeFactor(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNextPeriodStart(
    _periodDuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodIndex(
    _periodDuration: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegistryAddress(overrides?: CallOverrides): Promise<string>;

  isDepositsPaused(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFutureSetToBeTerminated(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFutureTerminated(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWithdrawalsPaused(
    _futureVault: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    _futureVault: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFYTDelegationFrom(
    _futureVault: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    STARTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    createFYTDelegationTo(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitTerminatedFuture(
      _futureVault: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDurations(overrides?: CallOverrides): Promise<BigNumber[]>;

    getFuturesWithDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextPeriodStart(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistryAddress(overrides?: CallOverrides): Promise<string>;

    isDepositsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFutureSetToBeTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFutureTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWithdrawalsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFYTDelegationFrom(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositsPaused(address)"(_futureVault?: null): DepositsPausedEventFilter;
    DepositsPaused(_futureVault?: null): DepositsPausedEventFilter;

    "DepositsResumed(address)"(_futureVault?: null): DepositsResumedEventFilter;
    DepositsResumed(_futureVault?: null): DepositsResumedEventFilter;

    "FutureRegistered(address)"(
      _futureVault?: null
    ): FutureRegisteredEventFilter;
    FutureRegistered(_futureVault?: null): FutureRegisteredEventFilter;

    "FutureSetToBeTerminated(address)"(
      _futureVault?: null
    ): FutureSetToBeTerminatedEventFilter;
    FutureSetToBeTerminated(
      _futureVault?: null
    ): FutureSetToBeTerminatedEventFilter;

    "FutureTerminated(address)"(
      _futureVault?: null
    ): FutureTerminatedEventFilter;
    FutureTerminated(_futureVault?: null): FutureTerminatedEventFilter;

    "FutureUnregistered(address)"(
      _futureVault?: null
    ): FutureUnregisteredEventFilter;
    FutureUnregistered(_futureVault?: null): FutureUnregisteredEventFilter;

    "NewPerformanceFeeFactor(address,uint256)"(
      _futureVault?: null,
      _feeFactor?: null
    ): NewPerformanceFeeFactorEventFilter;
    NewPerformanceFeeFactor(
      _futureVault?: null,
      _feeFactor?: null
    ): NewPerformanceFeeFactorEventFilter;

    "NewPeriodDurationIndexSet(uint256)"(
      _periodIndex?: null
    ): NewPeriodDurationIndexSetEventFilter;
    NewPeriodDurationIndexSet(
      _periodIndex?: null
    ): NewPeriodDurationIndexSetEventFilter;

    "NextPeriodSwitchSet(uint256,uint256)"(
      _periodDuration?: null,
      _nextSwitchTimestamp?: null
    ): NextPeriodSwitchSetEventFilter;
    NextPeriodSwitchSet(
      _periodDuration?: null,
      _nextSwitchTimestamp?: null
    ): NextPeriodSwitchSetEventFilter;

    "RegistryChanged(address)"(_registry?: null): RegistryChangedEventFilter;
    RegistryChanged(_registry?: null): RegistryChangedEventFilter;

    "StartingDelaySet(uint256)"(
      _startingDelay?: null
    ): StartingDelaySetEventFilter;
    StartingDelaySet(_startingDelay?: null): StartingDelaySetEventFilter;

    "WithdrawalsPaused(address)"(
      _futureVault?: null
    ): WithdrawalsPausedEventFilter;
    WithdrawalsPaused(_futureVault?: null): WithdrawalsPausedEventFilter;

    "WithdrawalsResumed(address)"(
      _futureVault?: null
    ): WithdrawalsResumedEventFilter;
    WithdrawalsResumed(_futureVault?: null): WithdrawalsResumedEventFilter;
  };

  estimateGas: {
    STARTING_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    createFYTDelegationTo(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitTerminatedFuture(
      _futureVault: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDurations(overrides?: CallOverrides): Promise<BigNumber>;

    getFuturesWithDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextPeriodStart(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    isDepositsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFutureSetToBeTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFutureTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWithdrawalsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFYTDelegationFrom(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    STARTING_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createFYTDelegationTo(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitTerminatedFuture(
      _futureVault: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDurations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFuturesWithDuration(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextPerformanceFeeFactor(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextPeriodStart(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodIndex(
      _periodDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDepositsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFutureSetToBeTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFutureTerminated(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWithdrawalsPaused(
      _futureVault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _futureVault: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFYTDelegationFrom(
      _futureVault: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
