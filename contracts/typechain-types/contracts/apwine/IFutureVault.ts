/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFutureVaultInterface extends utils.Interface {
  functions: {
    "PERIOD_DURATION()": FunctionFragment;
    "PLATFORM_NAME()": FunctionFragment;
    "addRewardsToken(address)": FunctionFragment;
    "claimFYT(address,uint256)": FunctionFragment;
    "convertIBTToUnderlying(uint256)": FunctionFragment;
    "convertUnderlyingtoIBT(uint256)": FunctionFragment;
    "createFYTDelegationTo(address,address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "exitTerminatedFuture(address)": FunctionFragment;
    "getClaimableFYTForPeriod(address,uint256)": FunctionFragment;
    "getClaimablePT(address)": FunctionFragment;
    "getControllerAddress()": FunctionFragment;
    "getCurrentPeriodIndex()": FunctionFragment;
    "getFYTofPeriod(uint256)": FunctionFragment;
    "getFutureWalletAddress()": FunctionFragment;
    "getIBTAddress()": FunctionFragment;
    "getNextPeriodIndex()": FunctionFragment;
    "getPTAddress()": FunctionFragment;
    "getPTPerAmountDeposited(uint256)": FunctionFragment;
    "getPerformanceFeeFactor()": FunctionFragment;
    "getPremiumPerUnderlyingDeposited(uint256)": FunctionFragment;
    "getRewardTokenAt(uint256)": FunctionFragment;
    "getRewardTokensCount()": FunctionFragment;
    "getRewardsRecipient()": FunctionFragment;
    "getTotalDelegated(address)": FunctionFragment;
    "getTotalUnderlyingDeposited()": FunctionFragment;
    "getUnlockableFunds(address)": FunctionFragment;
    "getUnrealisedYieldPerPT()": FunctionFragment;
    "getUserEarlyUnlockablePremium(address)": FunctionFragment;
    "getYieldOfPeriod(uint256)": FunctionFragment;
    "harvestRewards()": FunctionFragment;
    "isRewardToken(address)": FunctionFragment;
    "isTerminated()": FunctionFragment;
    "pauseLiquidityTransfers()": FunctionFragment;
    "redeemAllVaultRewards()": FunctionFragment;
    "redeemVaultRewards(address)": FunctionFragment;
    "resumeLiquidityTransfers()": FunctionFragment;
    "setFutureWallet(address)": FunctionFragment;
    "setRegistry(address)": FunctionFragment;
    "setRewardRecipient(address)": FunctionFragment;
    "startNewPeriod()": FunctionFragment;
    "updateUserState(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawFYTDelegationFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PERIOD_DURATION"
      | "PLATFORM_NAME"
      | "addRewardsToken"
      | "claimFYT"
      | "convertIBTToUnderlying"
      | "convertUnderlyingtoIBT"
      | "createFYTDelegationTo"
      | "deposit"
      | "exitTerminatedFuture"
      | "getClaimableFYTForPeriod"
      | "getClaimablePT"
      | "getControllerAddress"
      | "getCurrentPeriodIndex"
      | "getFYTofPeriod"
      | "getFutureWalletAddress"
      | "getIBTAddress"
      | "getNextPeriodIndex"
      | "getPTAddress"
      | "getPTPerAmountDeposited"
      | "getPerformanceFeeFactor"
      | "getPremiumPerUnderlyingDeposited"
      | "getRewardTokenAt"
      | "getRewardTokensCount"
      | "getRewardsRecipient"
      | "getTotalDelegated"
      | "getTotalUnderlyingDeposited"
      | "getUnlockableFunds"
      | "getUnrealisedYieldPerPT"
      | "getUserEarlyUnlockablePremium"
      | "getYieldOfPeriod"
      | "harvestRewards"
      | "isRewardToken"
      | "isTerminated"
      | "pauseLiquidityTransfers"
      | "redeemAllVaultRewards"
      | "redeemVaultRewards"
      | "resumeLiquidityTransfers"
      | "setFutureWallet"
      | "setRegistry"
      | "setRewardRecipient"
      | "startNewPeriod"
      | "updateUserState"
      | "withdraw"
      | "withdrawFYTDelegationFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PERIOD_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardsToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFYT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertIBTToUnderlying",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertUnderlyingtoIBT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createFYTDelegationTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitTerminatedFuture",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableFYTForPeriod",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimablePT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPeriodIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFYTofPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFutureWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIBTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextPeriodIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPTPerAmountDeposited",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerformanceFeeFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPremiumPerUnderlyingDeposited",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokensCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDelegated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUnderlyingDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockableFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnrealisedYieldPerPT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserEarlyUnlockablePremium",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldOfPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "harvestRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRewardToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTerminated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseLiquidityTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllVaultRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVaultRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeLiquidityTransfers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFutureWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startNewPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserState",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFYTDelegationFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "PERIOD_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFYT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertIBTToUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertUnderlyingtoIBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFYTDelegationTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitTerminatedFuture",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableFYTForPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimablePT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPeriodIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFYTofPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFutureWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIBTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextPeriodIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPTPerAmountDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerformanceFeeFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPremiumPerUnderlyingDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokensCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDelegated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUnderlyingDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockableFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnrealisedYieldPerPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserEarlyUnlockablePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldOfPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseLiquidityTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllVaultRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVaultRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumeLiquidityTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFutureWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startNewPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFYTDelegationFrom",
    data: BytesLike
  ): Result;

  events: {
    "DelegationCreated(address,address,uint256)": EventFragment;
    "DelegationRemoved(address,address,uint256)": EventFragment;
    "FundsDeposited(address,uint256)": EventFragment;
    "FundsWithdrawn(address,uint256)": EventFragment;
    "FutureWalletSet(address)": EventFragment;
    "LiquidityTransfersPaused()": EventFragment;
    "LiquidityTransfersResumed()": EventFragment;
    "NewPeriodStarted(uint256)": EventFragment;
    "PTSet(address)": EventFragment;
    "RegistrySet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegationCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegationRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FutureWalletSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityTransfersPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityTransfersResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPeriodStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PTSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrySet"): EventFragment;
}

export interface DelegationCreatedEventObject {
  _delegator: string;
  _receiver: string;
  _amount: BigNumber;
}
export type DelegationCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  DelegationCreatedEventObject
>;

export type DelegationCreatedEventFilter =
  TypedEventFilter<DelegationCreatedEvent>;

export interface DelegationRemovedEventObject {
  _delegator: string;
  _receiver: string;
  _amount: BigNumber;
}
export type DelegationRemovedEvent = TypedEvent<
  [string, string, BigNumber],
  DelegationRemovedEventObject
>;

export type DelegationRemovedEventFilter =
  TypedEventFilter<DelegationRemovedEvent>;

export interface FundsDepositedEventObject {
  _user: string;
  _amount: BigNumber;
}
export type FundsDepositedEvent = TypedEvent<
  [string, BigNumber],
  FundsDepositedEventObject
>;

export type FundsDepositedEventFilter = TypedEventFilter<FundsDepositedEvent>;

export interface FundsWithdrawnEventObject {
  _user: string;
  _amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface FutureWalletSetEventObject {
  _futureWallet: string;
}
export type FutureWalletSetEvent = TypedEvent<
  [string],
  FutureWalletSetEventObject
>;

export type FutureWalletSetEventFilter = TypedEventFilter<FutureWalletSetEvent>;

export interface LiquidityTransfersPausedEventObject {}
export type LiquidityTransfersPausedEvent = TypedEvent<
  [],
  LiquidityTransfersPausedEventObject
>;

export type LiquidityTransfersPausedEventFilter =
  TypedEventFilter<LiquidityTransfersPausedEvent>;

export interface LiquidityTransfersResumedEventObject {}
export type LiquidityTransfersResumedEvent = TypedEvent<
  [],
  LiquidityTransfersResumedEventObject
>;

export type LiquidityTransfersResumedEventFilter =
  TypedEventFilter<LiquidityTransfersResumedEvent>;

export interface NewPeriodStartedEventObject {
  _newPeriodIndex: BigNumber;
}
export type NewPeriodStartedEvent = TypedEvent<
  [BigNumber],
  NewPeriodStartedEventObject
>;

export type NewPeriodStartedEventFilter =
  TypedEventFilter<NewPeriodStartedEvent>;

export interface PTSetEventObject {
  _pt: string;
}
export type PTSetEvent = TypedEvent<[string], PTSetEventObject>;

export type PTSetEventFilter = TypedEventFilter<PTSetEvent>;

export interface RegistrySetEventObject {
  _registry: string;
}
export type RegistrySetEvent = TypedEvent<[string], RegistrySetEventObject>;

export type RegistrySetEventFilter = TypedEventFilter<RegistrySetEvent>;

export interface IFutureVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFutureVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERIOD_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PLATFORM_NAME(overrides?: CallOverrides): Promise<[string]>;

    addRewardsToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFYT(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertIBTToUnderlying(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertUnderlyingtoIBT(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createFYTDelegationTo(
      _delegator: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitTerminatedFuture(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimableFYTForPeriod(
      _user: PromiseOrValue<string>,
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimablePT(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getControllerAddress(overrides?: CallOverrides): Promise<[string]>;

    getCurrentPeriodIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFYTofPeriod(
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFutureWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    getIBTAddress(overrides?: CallOverrides): Promise<[string]>;

    getNextPeriodIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPTAddress(overrides?: CallOverrides): Promise<[string]>;

    getPTPerAmountDeposited(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPerformanceFeeFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPremiumPerUnderlyingDeposited(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardTokenAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRewardTokensCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardsRecipient(overrides?: CallOverrides): Promise<[string]>;

    getTotalDelegated(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalDelegated: BigNumber }>;

    getTotalUnderlyingDeposited(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnlockableFunds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUnrealisedYieldPerPT(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserEarlyUnlockablePremium(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        premiumLocked: BigNumber;
        amountRequired: BigNumber;
      }
    >;

    getYieldOfPeriod(
      _periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvestRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRewardToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTerminated(overrides?: CallOverrides): Promise<[boolean]>;

    pauseLiquidityTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemAllVaultRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemVaultRewards(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resumeLiquidityTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFutureWallet(
      _futureWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startNewPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUserState(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFYTDelegationFrom(
      _delegator: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PLATFORM_NAME(overrides?: CallOverrides): Promise<string>;

  addRewardsToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFYT(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertIBTToUnderlying(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertUnderlyingtoIBT(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createFYTDelegationTo(
    _delegator: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitTerminatedFuture(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimableFYTForPeriod(
    _user: PromiseOrValue<string>,
    _periodIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimablePT(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getControllerAddress(overrides?: CallOverrides): Promise<string>;

  getCurrentPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getFYTofPeriod(
    _periodIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFutureWalletAddress(overrides?: CallOverrides): Promise<string>;

  getIBTAddress(overrides?: CallOverrides): Promise<string>;

  getNextPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getPTAddress(overrides?: CallOverrides): Promise<string>;

  getPTPerAmountDeposited(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPerformanceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getPremiumPerUnderlyingDeposited(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardTokenAt(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRewardTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardsRecipient(overrides?: CallOverrides): Promise<string>;

  getTotalDelegated(
    _delegator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalUnderlyingDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  getUnlockableFunds(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnrealisedYieldPerPT(overrides?: CallOverrides): Promise<BigNumber>;

  getUserEarlyUnlockablePremium(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      premiumLocked: BigNumber;
      amountRequired: BigNumber;
    }
  >;

  getYieldOfPeriod(
    _periodID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvestRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isRewardToken(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTerminated(overrides?: CallOverrides): Promise<boolean>;

  pauseLiquidityTransfers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemAllVaultRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemVaultRewards(
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resumeLiquidityTransfers(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFutureWallet(
    _futureWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRegistry(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardRecipient(
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startNewPeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUserState(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFYTDelegationFrom(
    _delegator: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM_NAME(overrides?: CallOverrides): Promise<string>;

    addRewardsToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFYT(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    convertIBTToUnderlying(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUnderlyingtoIBT(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createFYTDelegationTo(
      _delegator: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitTerminatedFuture(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimableFYTForPeriod(
      _user: PromiseOrValue<string>,
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimablePT(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getControllerAddress(overrides?: CallOverrides): Promise<string>;

    getCurrentPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTofPeriod(
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFutureWalletAddress(overrides?: CallOverrides): Promise<string>;

    getIBTAddress(overrides?: CallOverrides): Promise<string>;

    getNextPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getPTAddress(overrides?: CallOverrides): Promise<string>;

    getPTPerAmountDeposited(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPerformanceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getPremiumPerUnderlyingDeposited(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokenAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRewardTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsRecipient(overrides?: CallOverrides): Promise<string>;

    getTotalDelegated(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUnderlyingDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockableFunds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnrealisedYieldPerPT(overrides?: CallOverrides): Promise<BigNumber>;

    getUserEarlyUnlockablePremium(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        premiumLocked: BigNumber;
        amountRequired: BigNumber;
      }
    >;

    getYieldOfPeriod(
      _periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestRewards(overrides?: CallOverrides): Promise<void>;

    isRewardToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTerminated(overrides?: CallOverrides): Promise<boolean>;

    pauseLiquidityTransfers(overrides?: CallOverrides): Promise<void>;

    redeemAllVaultRewards(overrides?: CallOverrides): Promise<void>;

    redeemVaultRewards(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resumeLiquidityTransfers(overrides?: CallOverrides): Promise<void>;

    setFutureWallet(
      _futureWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startNewPeriod(overrides?: CallOverrides): Promise<void>;

    updateUserState(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFYTDelegationFrom(
      _delegator: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DelegationCreated(address,address,uint256)"(
      _delegator?: null,
      _receiver?: null,
      _amount?: null
    ): DelegationCreatedEventFilter;
    DelegationCreated(
      _delegator?: null,
      _receiver?: null,
      _amount?: null
    ): DelegationCreatedEventFilter;

    "DelegationRemoved(address,address,uint256)"(
      _delegator?: null,
      _receiver?: null,
      _amount?: null
    ): DelegationRemovedEventFilter;
    DelegationRemoved(
      _delegator?: null,
      _receiver?: null,
      _amount?: null
    ): DelegationRemovedEventFilter;

    "FundsDeposited(address,uint256)"(
      _user?: null,
      _amount?: null
    ): FundsDepositedEventFilter;
    FundsDeposited(_user?: null, _amount?: null): FundsDepositedEventFilter;

    "FundsWithdrawn(address,uint256)"(
      _user?: null,
      _amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(_user?: null, _amount?: null): FundsWithdrawnEventFilter;

    "FutureWalletSet(address)"(
      _futureWallet?: null
    ): FutureWalletSetEventFilter;
    FutureWalletSet(_futureWallet?: null): FutureWalletSetEventFilter;

    "LiquidityTransfersPaused()"(): LiquidityTransfersPausedEventFilter;
    LiquidityTransfersPaused(): LiquidityTransfersPausedEventFilter;

    "LiquidityTransfersResumed()"(): LiquidityTransfersResumedEventFilter;
    LiquidityTransfersResumed(): LiquidityTransfersResumedEventFilter;

    "NewPeriodStarted(uint256)"(
      _newPeriodIndex?: null
    ): NewPeriodStartedEventFilter;
    NewPeriodStarted(_newPeriodIndex?: null): NewPeriodStartedEventFilter;

    "PTSet(address)"(_pt?: null): PTSetEventFilter;
    PTSet(_pt?: null): PTSetEventFilter;

    "RegistrySet(address)"(_registry?: null): RegistrySetEventFilter;
    RegistrySet(_registry?: null): RegistrySetEventFilter;
  };

  estimateGas: {
    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardsToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFYT(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertIBTToUnderlying(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertUnderlyingtoIBT(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createFYTDelegationTo(
      _delegator: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitTerminatedFuture(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimableFYTForPeriod(
      _user: PromiseOrValue<string>,
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimablePT(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getControllerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTofPeriod(
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFutureWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getIBTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getNextPeriodIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getPTAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPTPerAmountDeposited(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPerformanceFeeFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getPremiumPerUnderlyingDeposited(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokenAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardTokensCount(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDelegated(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUnderlyingDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockableFunds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnrealisedYieldPerPT(overrides?: CallOverrides): Promise<BigNumber>;

    getUserEarlyUnlockablePremium(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYieldOfPeriod(
      _periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvestRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isRewardToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTerminated(overrides?: CallOverrides): Promise<BigNumber>;

    pauseLiquidityTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemAllVaultRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemVaultRewards(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resumeLiquidityTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFutureWallet(
      _futureWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startNewPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUserState(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFYTDelegationFrom(
      _delegator: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERIOD_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PLATFORM_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardsToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFYT(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertIBTToUnderlying(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertUnderlyingtoIBT(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createFYTDelegationTo(
      _delegator: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitTerminatedFuture(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableFYTForPeriod(
      _user: PromiseOrValue<string>,
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimablePT(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getControllerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPeriodIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFYTofPeriod(
      _periodIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFutureWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIBTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNextPeriodIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPTAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPTPerAmountDeposited(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerformanceFeeFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPremiumPerUnderlyingDeposited(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardTokenAt(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardTokensCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDelegated(
      _delegator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUnderlyingDeposited(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlockableFunds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnrealisedYieldPerPT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserEarlyUnlockablePremium(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYieldOfPeriod(
      _periodID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isRewardToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTerminated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseLiquidityTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemAllVaultRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemVaultRewards(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resumeLiquidityTransfers(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFutureWallet(
      _futureWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRegistry(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startNewPeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUserState(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFYTDelegationFrom(
      _delegator: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
