/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Controller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controller__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "IFutureVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFutureVault__factory>;
    getContractFactory(
      name: "IFutureWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFutureWallet__factory>;
    getContractFactory(
      name: "IFutureYieldToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFutureYieldToken__factory>;
    getContractFactory(
      name: "IPT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPT__factory>;
    getContractFactory(
      name: "IRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistry__factory>;
    getContractFactory(
      name: "RegistryStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryStorage__factory>;
    getContractFactory(
      name: "RoleCheckable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleCheckable__factory>;
    getContractFactory(
      name: "FutureVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FutureVault__factory>;
    getContractFactory(
      name: "HybridFutureVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HybridFutureVault__factory>;
    getContractFactory(
      name: "IController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IController__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "IFutureVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFutureVault__factory>;
    getContractFactory(
      name: "IFutureWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFutureWallet__factory>;
    getContractFactory(
      name: "IFutureYieldToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFutureYieldToken__factory>;
    getContractFactory(
      name: "IPT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPT__factory>;
    getContractFactory(
      name: "IRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistry__factory>;
    getContractFactory(
      name: "ITokensFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokensFactory__factory>;
    getContractFactory(
      name: "LidoFutureVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LidoFutureVault__factory>;
    getContractFactory(
      name: "RateFutureVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RateFutureVault__factory>;
    getContractFactory(
      name: "RegistryStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistryStorage__factory>;
    getContractFactory(
      name: "RewardsFutureVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsFutureVault__factory>;
    getContractFactory(
      name: "RoleCheckable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleCheckable__factory>;
    getContractFactory(
      name: "Multipayment",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multipayment__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "Controller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controller>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "IFutureVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFutureVault>;
    getContractAt(
      name: "IFutureWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFutureWallet>;
    getContractAt(
      name: "IFutureYieldToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFutureYieldToken>;
    getContractAt(
      name: "IPT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPT>;
    getContractAt(
      name: "IRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistry>;
    getContractAt(
      name: "RegistryStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryStorage>;
    getContractAt(
      name: "RoleCheckable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleCheckable>;
    getContractAt(
      name: "FutureVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FutureVault>;
    getContractAt(
      name: "HybridFutureVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HybridFutureVault>;
    getContractAt(
      name: "IController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IController>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "IFutureVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFutureVault>;
    getContractAt(
      name: "IFutureWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFutureWallet>;
    getContractAt(
      name: "IFutureYieldToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFutureYieldToken>;
    getContractAt(
      name: "IPT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPT>;
    getContractAt(
      name: "IRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistry>;
    getContractAt(
      name: "ITokensFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokensFactory>;
    getContractAt(
      name: "LidoFutureVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LidoFutureVault>;
    getContractAt(
      name: "RateFutureVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RateFutureVault>;
    getContractAt(
      name: "RegistryStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistryStorage>;
    getContractAt(
      name: "RewardsFutureVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsFutureVault>;
    getContractAt(
      name: "RoleCheckable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleCheckable>;
    getContractAt(
      name: "Multipayment",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multipayment>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
